---
title: "Water Temperature at Beaches in Toronto"
author: "Yu, Lexun"
date: format(Sys.time(), "%d %B %Y")
format: html
abstract: "This is a Quarto file that downloads a dataset using opendatatoronto, cleans it, and makes a graph."
bibliography: bibliography.bib
---

```{r}
#| echo: false
#| include: false
library(opendatatoronto)
library(dplyr)
library(knitr)
library(janitor)
library(lubridate)
library(tidyverse)
```

# Plan

The dataset I am interested in would need to have the date, and the water temperature. A quick sketch of a dataset that would work is @fig-plan-quick-sketch, I am interested in the water temperature each month, the table would be like @fig-plan-table-created: 

::: {#fig-plan layout-ncol="2" layout-valign="bottom"}
![Quick sketch of a dataset](Figures/figure1a-quick-sketch-of-dataset.png){#fig-plan-quick-sketch width="45%"}

![Quick sketch of a table of the average water temperature each month](Figures/figure1b-table-created.png){#fig-plan-table-created width="45%"}

Sketches of a potential dataset and table related to water temperature.
:::

Them I will draw a geom_point graph like @fig-graph: 

::: {#fig-plan layout-ncol="1" layout-valign="bottom"}

![Quick sketch of a graph](Figures/figure2-graph.png){#fig-graph width="100%"}

Sketches of a potential dataset and graph related to water temperature.
:::

# Simulate
```{r}
citation()
citation("ggplot2")
```

After examining the raw data, I found that there is only data between May and September. So, I am only generating simulated data between May and September
```{r}
set.seed(853)

simulated_temp_data <- 
    tibble(
        date = rep(x = as.Date("2016-05-01") + c(0:152), times = 1),
        water_temp = rpois(
            n = 153 * 1,
            lambda = 16
        )
    )

head(simulated_temp_data)
```

## Acquire and display the raw data

The following terminal output displays the raw data obtained from [opendatatoronto](https://open.toronto.ca/dataset/events-at-nathan-phillips-square/).
```{r}
#| echo: false
#| include: false

# get package
package <- show_package("toronto-beaches-observations")
package
 
# get all resources for this package
resources <- list_package_resources("toronto-beaches-observations")
 
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
```

```{r}
#| echo: false

# load the first datastore resource as a sample
raw_data <- filter(datastore_resources, row_number()==1) %>% get_resource()
head(raw_data)

write_csv(
  x = raw_data,
  file = "input/toronto_beaches.csv"
)
```

## Clean the data
Read the csv
```{r}
raw_toronto_beaches_data <-
  read_csv(
    file = "input/toronto_beaches.csv",
    show_col_types = FALSE
  )
head(raw_toronto_beaches_data)
```

Clean names

```{r}
cleaned_beaches_data <-
    clean_names(raw_toronto_beaches_data)
head(cleaned_beaches_data)
```

keep only the necessary date and water temperature information
```{r}
cleaned_beaches_data <-
  cleaned_beaches_data |>
  select(
    data_collection_date,
    water_temp
  )

cleaned_beaches_data <-
  cleaned_beaches_data |>
  rename(
    date = data_collection_date,
    temp = water_temp
  )

head(cleaned_beaches_data)
names(cleaned_beaches_data)

```

Write the new csv

```{r}
write_csv(
  x = cleaned_beaches_data,
  file = "output/cleaned_beaches_data.csv"
)
```

```{r}
beaches_clean <-
    read_csv("output/cleaned_beaches_data.csv", show_col_types = FALSE)
```

Group the cleaned data by year.
```{r}
summary_data <- beaches_clean |>
  mutate(temp_year = year(date)
  ) |>
  arrange(year(date)) |> 
  drop_na(temp) |> 
  summarise(number_temp = mean(temp),
            .by = temp_year)

write_csv(summary_data, file = "output/cleaned_beaches_data_year.csv")
summary_data |> kable()
```



# Explore

I can now make a graph of how water temperature change over time. 

```{r}
summary_data |>
  ggplot(aes(x = temp_year, y = number_temp)) +
  geom_point() +
  labs(x = "Year", y = "Water Temperature") +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")
```